// Script de test pour v√©rifier l'authentification de l'edge function
// Ex√©cutez ce script avec : node test-edge-function-auth.js

const edgeFunctionUrl = 'https://mspmrzlqhwpdkkburjiw.supabase.co/functions/v1/upload-partner-logo';

async function testEdgeFunctionAuth() {
  /*console.log('üß™ Test d\'authentification de l\'edge function...\n')*/
  
  // Test 1: Sans authentification
  /*console.log('üì° Test 1: Sans en-t√™te d\'authentification')*/
  try {
    const response = await fetch(edgeFunctionUrl, { method: 'OPTIONS' });
    /*console.log(`   Status: ${response.status} ${response.statusText}`)*/
    /*console.log(`   Headers:`, Object.fromEntries(response.headers.entries()*/));
  } catch (error) {
    /*console.log(`   ‚ùå Erreur: ${error.message}`)*/
  }

  // Test 2: Avec en-t√™te d'authentification vide
  /*console.log('\nüì° Test 2: Avec en-t√™te d\'authentification vide')*/
  try {
    const response = await fetch(edgeFunctionUrl, { 
      method: 'OPTIONS',
      headers: { 'Authorization': 'Bearer ' }
    });
    /*console.log(`   Status: ${response.status} ${response.statusText}`)*/
    /*console.log(`   Headers:`, Object.fromEntries(response.headers.entries()*/));
  } catch (error) {
    /*console.log(`   ‚ùå Erreur: ${error.message}`)*/
  }

  // Test 3: Avec en-t√™te d'authentification invalide
  /*console.log('\nüì° Test 3: Avec en-t√™te d\'authentification invalide')*/
  try {
    const response = await fetch(edgeFunctionUrl, { 
      method: 'OPTIONS',
      headers: { 'Authorization': 'Bearer invalid-key' }
    });
    /*console.log(`   Status: ${response.status} ${response.statusText}`)*/
    /*console.log(`   Headers:`, Object.fromEntries(response.headers.entries()*/));
  } catch (error) {
    /*console.log(`   ‚ùå Erreur: ${error.message}`)*/
  }

  // Test 4: V√©rifier les variables d'environnement
  /*console.log('\nüîß V√©rification des variables d\'environnement:')*/
  /*console.log(`   NEXT_PUBLIC_SUPABASE_URL: ${process.env.NEXT_PUBLIC_SUPABASE_URL || 'Non d√©finie'}`)*/
  /*console.log(`   NEXT_PUBLIC_SUPABASE_ANON_KEY: ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'D√©finie (' + process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY.substring(0, 20)*/ + '...)' : 'Non d√©finie'}`);

  // Test 5: Test avec la vraie cl√© si disponible
  if (process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
    /*console.log('\nüì° Test 4: Avec la vraie cl√© d\'authentification')*/
    try {
      const response = await fetch(edgeFunctionUrl, { 
        method: 'OPTIONS',
        headers: { 
          'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json'
        }
      });
      /*console.log(`   Status: ${response.status} ${response.statusText}`)*/
      /*console.log(`   Headers:`, Object.fromEntries(response.headers.entries()*/));
      
      if (response.ok) {
        /*console.log('   ‚úÖ Authentification r√©ussie !')*/
      } else {
        /*console.log('   ‚ùå Authentification √©chou√©e')*/
      }
    } catch (error) {
      /*console.log(`   ‚ùå Erreur: ${error.message}`)*/
    }
  }

  /*console.log('\nüìã R√©sum√© des tests:')*/
  /*console.log('   - Status 200-299: ‚úÖ Succ√®s')*/
  /*console.log('   - Status 401: ‚ùå Non autoris√© (cl√© invalide ou manquante)*/');
  /*console.log('   - Status 403: ‚ùå Interdit (permissions insuffisantes)*/');
  /*console.log('   - Status 404: ‚ùå Non trouv√© (URL incorrecte)*/');
  /*console.log('   - Status 500+: ‚ùå Erreur serveur')*/
}

// Ex√©cuter les tests
testEdgeFunctionAuth().catch(console.error);











