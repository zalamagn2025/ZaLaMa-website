// Script de test pour v√©rifier l'√©tat de l'authentification
console.log('üîç V√©rification de l\'√©tat de l\'authentification...');

// V√©rifier les tokens dans localStorage et sessionStorage
const employeeAccessToken = localStorage.getItem('employee_access_token');
const employeeRefreshToken = localStorage.getItem('employee_refresh_token');
const employeeToken = localStorage.getItem('employee_token'); // Ancienne cl√©

console.log('üìã Tokens trouv√©s:');
console.log('- employee_access_token (localStorage):', employeeAccessToken ? '‚úÖ Pr√©sent' : '‚ùå Absent');
console.log('- employee_refresh_token (localStorage):', employeeRefreshToken ? '‚úÖ Pr√©sent' : '‚ùå Absent');
console.log('- employee_token (localStorage) - ANCIENNE CL√â:', employeeToken ? '‚ö†Ô∏è Pr√©sent (ancienne cl√©)' : '‚ùå Absent');

// V√©rifier si l'utilisateur est connect√©
if (employeeAccessToken) {
  console.log('‚úÖ Utilisateur authentifi√© avec employee_access_token');
  
  // D√©coder le token pour voir les informations
  try {
    const base64Url = employeeAccessToken.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const payload = JSON.parse(atob(base64));
    
    console.log('üîë Informations du token:');
    console.log('- Expire le:', new Date(payload.exp * 1000).toLocaleString());
    console.log('- √âmis le:', new Date(payload.iat * 1000).toLocaleString());
    console.log('- Email:', payload.email || 'Non sp√©cifi√©');
    console.log('- User ID:', payload.sub || 'Non sp√©cifi√©');
    
    // V√©rifier si le token est expir√©
    const currentTime = Math.floor(Date.now() / 1000);
    const isExpired = payload.exp < currentTime;
    console.log('- Expir√©:', isExpired ? '‚ùå OUI' : '‚úÖ NON');
    
    if (!isExpired) {
      // Tester l'appel √† l'API employee-demands
      console.log('üß™ Test de l\'API employee-demands...');
      
      fetch('/api/employee-demands/stats', {
        headers: {
          'Authorization': `Bearer ${employeeAccessToken}`,
          'Content-Type': 'application/json'
        }
      })
      .then(response => {
        console.log('üìä R√©ponse API stats:', response.status, response.statusText);
        return response.json();
      })
      .then(data => {
        console.log('üìä Donn√©es re√ßues:', data);
        if (data.success) {
          console.log('‚úÖ API employee-demands fonctionne correctement!');
        } else {
          console.log('‚ùå Erreur API:', data.error);
        }
      })
      .catch(error => {
        console.error('‚ùå Erreur API:', error);
      });
    } else {
      console.log('‚ö†Ô∏è Token expir√© - veuillez vous reconnecter');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©codage du token:', error);
  }
  
} else {
  console.log('‚ùå Aucun token employee_access_token trouv√© - utilisateur non authentifi√©');
  console.log('üí° Connectez-vous d\'abord sur /login');
  
  // Nettoyer l'ancienne cl√© si elle existe
  if (employeeToken) {
    console.log('üßπ Nettoyage de l\'ancienne cl√© employee_token...');
    localStorage.removeItem('employee_token');
  }
}
