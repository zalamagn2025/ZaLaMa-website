// Script de v√©rification des emails envoy√©s
require('dotenv').config();

/*console.log('üîç V√âRIFICATION DES EMAILS ENVOY√âS')*/
/*console.log('==================================')*/

// V√©rifier la configuration actuelle
function checkCurrentConfig() {
  /*console.log('\nüìã CONFIGURATION ACTUELLE :')*/
  /*console.log('RESEND_API_KEY:', process.env.RESEND_API_KEY ? '‚úÖ Configur√©' : '‚ùå Manquant')*/
  
  if (process.env.RESEND_API_KEY) {
    /*console.log('Format de la cl√©:', process.env.RESEND_API_KEY.startsWith('re_')*/ ? '‚úÖ Correct' : '‚ùå Incorrect');
    /*console.log('Longueur:', process.env.RESEND_API_KEY.length)*/
    /*console.log('Premiers caract√®res:', process.env.RESEND_API_KEY.substring(0, 10)*/ + '...');
  }
}

// Test d'envoi r√©el avec la cl√© actuelle
async function testCurrentKey() {
  try {
    const { Resend } = require('resend');
    
    if (!process.env.RESEND_API_KEY) {
      /*console.log('\n‚ùå Aucune cl√© API configur√©e actuellement')*/
      return false;
    }

    const resend = new Resend(process.env.RESEND_API_KEY);
    
    /*console.log('\nüß™ TEST D\'ENVOI AVEC LA CL√â ACTUELLE...')*/
    
    // Test simple
    const testEmail = {
      from: 'ZaLaMa <noreply@zalama.com>',
      to: ['test@example.com'],
      subject: 'Test V√©rification - ' + new Date().toISOString(),
      html: '<p>Test de v√©rification</p>',
      text: 'Test de v√©rification'
    };

    const result = await resend.emails.send(testEmail);
    
    if (result.error) {
      /*console.log('‚ùå √âchec avec la cl√© actuelle:', result.error.message)*/
      return false;
    } else {
      /*console.log('‚úÖ Succ√®s avec la cl√© actuelle - ID:', result.data?.id)*/
      return true;
    }
    
  } catch (error) {
    /*console.log('‚ùå Erreur avec la cl√© actuelle:', error.message)*/
    return false;
  }
}

// V√©rifier les logs Resend (si possible)
async function checkResendLogs() {
  try {
    const { Resend } = require('resend');
    
    if (!process.env.RESEND_API_KEY) {
      return;
    }

    const resend = new Resend(process.env.RESEND_API_KEY);
    
    /*console.log('\nüìä TENTATIVE DE R√âCUP√âRATION DES LOGS RESEND...')*/
    
    try {
      // Essayer de r√©cup√©rer les emails r√©cents
      const emails = await resend.emails.list();
      /*console.log('üìß Emails r√©cents trouv√©s:', emails.data?.length || 0)*/
      
      if (emails.data && emails.data.length > 0) {
        /*console.log('\nüìã DERNIERS EMAILS ENVOY√âS :')*/
        emails.data.slice(0, 5).forEach((email, index) => {
          /*console.log(`${index + 1}. ID: ${email.id}`)*/
          /*console.log(`   √Ä: ${email.to?.join(', ')*/}`);
          /*console.log(`   Sujet: ${email.subject}`)*/
          /*console.log(`   Statut: ${email.status}`)*/
          /*console.log(`   Date: ${email.created_at}`)*/
          /*console.log('')*/
        });
      }
      
    } catch (error) {
      /*console.log('‚ùå Impossible de r√©cup√©rer les logs:', error.message)*/
    }
    
  } catch (error) {
    /*console.log('‚ùå Erreur r√©cup√©ration logs:', error.message)*/
  }
}

// Analyser les possibilit√©s
function analyzePossibilities() {
  /*console.log('\nü§î ANALYSE DES POSSIBILIT√âS :')*/
  /*console.log('=============================')*/
  
  /*console.log('\n1. üìß EMAILS RH/REPR√âSENTANT ENVOY√âS VRAIMENT ?')*/
  /*console.log('   - V√©rifiez vos bo√Ætes de r√©ception')*/
  /*console.log('   - V√©rifiez les spams')*/
  /*console.log('   - Demandez confirmation aux destinataires')*/
  
  /*console.log('\n2. üîë CL√â API TEMPORAIREMENT VALIDE ?')*/
  /*console.log('   - La cl√© a pu √™tre valide au moment de l\'envoi')*/
  /*console.log('   - Elle a pu expirer ou √™tre r√©voqu√©e')*/
  /*console.log('   - Probl√®me de cache c√¥t√© Resend')*/
  
  /*console.log('\n3. üìù LOGS INCORRECTS ?')*/
  /*console.log('   - Les logs peuvent √™tre erron√©s')*/
  /*console.log('   - Les emails marqu√©s "succ√®s" par erreur')*/
  /*console.log('   - Probl√®me de gestion d\'erreurs dans le code')*/
  
  /*console.log('\n4. üîÑ AUTRE SERVICE UTILIS√â ?')*/
  /*console.log('   - Un autre service d\'email temporaire')*/
  /*console.log('   - Un autre compte Resend')*/
  /*console.log('   - Configuration diff√©rente au moment de l\'envoi')*/
}

// Ex√©cuter la v√©rification
async function runVerification() {
  /*console.log('üöÄ D√âMARRAGE DE LA V√âRIFICATION...')*/
  
  // V√©rifier la configuration actuelle
  checkCurrentConfig();
  
  // Test avec la cl√© actuelle
  /*console.log('\n' + '='.repeat(50)*/);
  const currentKeyWorks = await testCurrentKey();
  
  // V√©rifier les logs Resend
  /*console.log('\n' + '='.repeat(50)*/);
  await checkResendLogs();
  
  // Analyser les possibilit√©s
  /*console.log('\n' + '='.repeat(50)*/);
  analyzePossibilities();
  
  // Conclusion
  /*console.log('\nüìù CONCLUSION :')*/
  if (currentKeyWorks) {
    /*console.log('‚úÖ La cl√© API actuelle fonctionne')*/
    /*console.log('   ‚Üí Les emails RH/Repr√©sentant ont pu √™tre envoy√©s avec cette cl√©')*/
  } else {
    /*console.log('‚ùå La cl√© API actuelle ne fonctionne pas')*/
    /*console.log('   ‚Üí Les emails RH/Repr√©sentant ont √©t√© envoy√©s avec une autre cl√© ou service')*/
  }
  
  /*console.log('\nüîß PROCHAINES √âTAPES :')*/
  /*console.log('1. V√©rifiez si les emails RH/Repr√©sentant sont vraiment arriv√©s')*/
  /*console.log('2. Corrigez la cl√© API Resend')*/
  /*console.log('3. Testez √† nouveau le syst√®me complet')*/
}

// Ex√©cuter
runVerification().catch(error => {
  console.error('\nüí• ERREUR:', error);
  process.exit(1);
}); 