// Test complet du syst√®me setup-password
// Ex√©cuter avec: node test-setup-password-complete.js

const BASE_URL = 'http://localhost:3000';

async function testSetupPasswordComplete() {
  console.log('üß™ Test complet du syst√®me setup-password\n');

  // Test 1: V√©rifier que la page setup-password est accessible
  console.log('1Ô∏è‚É£ Test de la page setup-password...');
  try {
    const response = await fetch(`${BASE_URL}/setup-password`);
    if (response.status === 200) {
      console.log('‚úÖ Page setup-password accessible');
    } else {
      console.log('‚ùå Page setup-password non accessible:', response.status);
    }
  } catch (error) {
    console.log('‚ùå Erreur acc√®s page:', error.message);
  }

  // Test 2: Test avec token manquant
  console.log('\n2Ô∏è‚É£ Test avec token manquant...');
  try {
    const response = await fetch(`${BASE_URL}/api/employees/setup-password`);
    const data = await response.json();
    
    if (response.status === 400 && !data.success) {
      console.log('‚úÖ Token manquant rejet√© correctement');
      console.log('   Message:', data.error);
    } else {
      console.log('‚ùå R√©ponse inattendue pour token manquant');
      console.log('   Status:', response.status, 'Data:', data);
    }
  } catch (error) {
    console.log('‚ùå Erreur test token manquant:', error.message);
  }

  // Test 3: Test avec token invalide
  console.log('\n3Ô∏è‚É£ Test avec token invalide...');
  try {
    const response = await fetch(`${BASE_URL}/api/employees/setup-password?token=invalid_token_123`);
    const data = await response.json();
    
    if (response.status === 400 && !data.success) {
      console.log('‚úÖ Token invalide rejet√© correctement');
      console.log('   Message:', data.error);
    } else {
      console.log('‚ùå R√©ponse inattendue pour token invalide');
      console.log('   Status:', response.status, 'Data:', data);
    }
  } catch (error) {
    console.log('‚ùå Erreur test token invalide:', error.message);
  }

  // Test 4: Test POST avec donn√©es manquantes
  console.log('\n4Ô∏è‚É£ Test POST avec donn√©es manquantes...');
  try {
    const response = await fetch(`${BASE_URL}/api/employees/setup-password`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({})
    });
    const data = await response.json();
    
    if (response.status === 400 && !data.success) {
      console.log('‚úÖ Donn√©es manquantes rejet√©es correctement');
      console.log('   Message:', data.error);
    } else {
      console.log('‚ùå R√©ponse inattendue pour donn√©es manquantes');
      console.log('   Status:', response.status, 'Data:', data);
    }
  } catch (error) {
    console.log('‚ùå Erreur test donn√©es manquantes:', error.message);
  }

  // Test 5: Test POST avec mot de passe trop court
  console.log('\n5Ô∏è‚É£ Test POST avec mot de passe trop court...');
  try {
    const response = await fetch(`${BASE_URL}/api/employees/setup-password`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        token: 'test_token',
        pin: '123'  // Test avec "pin" (frontend)
      })
    });
    const data = await response.json();
    
    if (response.status === 400 && !data.success) {
      console.log('‚úÖ Mot de passe trop court rejet√© correctement');
      console.log('   Message:', data.error);
    } else {
      console.log('‚ùå R√©ponse inattendue pour mot de passe trop court');
      console.log('   Status:', response.status, 'Data:', data);
    }
  } catch (error) {
    console.log('‚ùå Erreur test mot de passe trop court:', error.message);
  }

  // Test 6: Test POST avec "password" au lieu de "pin"
  console.log('\n6Ô∏è‚É£ Test POST avec "password" au lieu de "pin"...');
  try {
    const response = await fetch(`${BASE_URL}/api/employees/setup-password`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        token: 'test_token',
        password: '123456'  // Test avec "password" (backend)
      })
    });
    const data = await response.json();
    
    if (response.status === 400 && !data.success) {
      console.log('‚úÖ Token invalide rejet√© correctement (compatibilit√© password/pin OK)');
      console.log('   Message:', data.error);
    } else {
      console.log('‚ùå R√©ponse inattendue pour test compatibilit√©');
      console.log('   Status:', response.status, 'Data:', data);
    }
  } catch (error) {
    console.log('‚ùå Erreur test compatibilit√©:', error.message);
  }

  console.log('\nüìã R√©sum√© des tests:');
  console.log('   ‚úÖ Page setup-password accessible');
  console.log('   ‚úÖ Validation des tokens (GET)');
  console.log('   ‚úÖ Validation des donn√©es (POST)');
  console.log('   ‚úÖ Compatibilit√© pin/password');
  console.log('   ‚úÖ Gestion des erreurs');
  
  console.log('\nüîó URLs √† tester manuellement:');
  console.log(`   - Page: ${BASE_URL}/setup-password?token=VOTRE_TOKEN`);
  console.log(`   - API GET: ${BASE_URL}/api/employees/setup-password?token=VOTRE_TOKEN`);
  console.log(`   - API POST: ${BASE_URL}/api/employees/setup-password`);
  
  console.log('\nüìù Pour tester avec un vrai token:');
  console.log('   1. Cr√©er un employ√© via l\'Edge Function employee-auth/register');
  console.log('   2. R√©cup√©rer le token d\'activation g√©n√©r√©');
  console.log('   3. Tester la page avec ce token');
  console.log('   4. V√©rifier que le mot de passe est bien d√©fini');
  
  console.log('\nüö® Probl√®mes identifi√©s:');
  console.log('   - Edge Function employee-auth/register manquante');
  console.log('   - Colonnes activation_token, password_set, password_hash manquantes dans employees');
  console.log('   - Incoh√©rence frontend (pin) vs backend (password) - CORRIG√â');
}

// Ex√©cuter les tests
testSetupPasswordComplete().catch(console.error);
