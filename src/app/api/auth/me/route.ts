import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'
import { NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  try {
    console.log('üë§ R√©cup√©ration des informations utilisateur...')
    
    const cookieStore = await cookies()
    
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            return cookieStore.get(name)?.value
          },
          set(name: string, value: string, options: any) {
            cookieStore.set({ name, value, ...options })
          },
          remove(name: string, options: any) {
            cookieStore.set({ name, value: '', ...options })
          },
        },
      }
    )
    
    // R√©cup√©rer la session utilisateur
    const { data: { session }, error: sessionError } = await supabase.auth.getSession()
    
    if (sessionError || !session) {
      console.log('‚ùå Aucune session trouv√©e')
      return NextResponse.json(
        { error: 'Non authentifi√©' },
        { status: 401 }
      )
    }

    console.log('‚úÖ Session trouv√©e pour:', session.user.email)

    // Essayer d'abord de r√©cup√©rer les donn√©es depuis la table users (responsables/RH)
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', session.user.email)
      .single()

    if (userError && userError.code !== 'PGRST116') {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es utilisateur:', userError)
      return NextResponse.json(
        { error: 'Erreur lors de la r√©cup√©ration des donn√©es utilisateur' },
        { status: 500 }
      )
    }

    // Si l'utilisateur est trouv√© dans la table users
    if (userData) {
      console.log('‚úÖ Donn√©es utilisateur r√©cup√©r√©es, type:', userData.type)
      
      // Combiner les donn√©es
      const user = {
        uid: session.user.id,
        email: session.user.email,
        emailVerified: session.user.email_confirmed_at ? true : false,
        displayName: session.user.user_metadata?.full_name || session.user.user_metadata?.name,
        photoURL: session.user.user_metadata?.avatar_url,
        // Donn√©es utilisateur
        ...userData
      }

      console.log('‚úÖ Informations utilisateur compl√®tes r√©cup√©r√©es')
      return NextResponse.json({ user })
    }

    // Si l'utilisateur n'est pas dans users, essayer dans employees
    console.log('üîç Utilisateur non trouv√© dans users, recherche dans employees...')
    
    const { data: employeeData, error: employeeError } = await supabase
      .from('employees')
      .select('*')
      .eq('user_id', session.user.id)
      .single()

    if (employeeError && employeeError.code !== 'PGRST116') {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es employ√©:', employeeError)
      return NextResponse.json(
        { error: 'Erreur lors de la r√©cup√©ration des donn√©es employ√©' },
        { status: 500 }
      )
    }

    if (employeeData) {
      console.log('‚úÖ Donn√©es employ√© r√©cup√©r√©es:', employeeData.nom_complet || `${employeeData.prenom} ${employeeData.nom}`)
      
      // Cr√©er un objet utilisateur pour les employ√©s
      const user = {
        uid: session.user.id,
        email: session.user.email,
        emailVerified: session.user.email_confirmed_at ? true : false,
        displayName: session.user.user_metadata?.full_name || session.user.user_metadata?.name,
        photoURL: session.user.user_metadata?.avatar_url,
        // Type par d√©faut pour les employ√©s
        type: 'Salari√©',
        statut: 'Actif',
        actif: true,
        // Donn√©es employ√©
        employeId: employeeData.id,
        prenom: employeeData.prenom,
        nom: employeeData.nom,
        nomComplet: `${employeeData.prenom} ${employeeData.nom}`,
        telephone: employeeData.telephone,
        poste: employeeData.poste,
        role: employeeData.role,
        genre: employeeData.genre,
        adresse: employeeData.adresse,
        salaireNet: employeeData.salaire_net,
        typeContrat: employeeData.type_contrat,
        dateEmbauche: employeeData.date_embauche,
        partenaireId: employeeData.partner_id
      }

      console.log('‚úÖ Informations employ√© compl√®tes r√©cup√©r√©es')
      return NextResponse.json({ user })
    }

    // Si ni dans users ni dans employees
    console.log('‚ö†Ô∏è Utilisateur non trouv√© dans users ni employees')
    return NextResponse.json(
      { error: 'Utilisateur non trouv√© dans la base de donn√©es' },
      { status: 404 }
    )
    
  } catch (error) {
    console.error('üí• Erreur dans /api/auth/me:', error)
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500 }
    )
  }
} 