import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

export async function GET(request: NextRequest) {
  try {
    /*console.log('üîç API /salary-setup/check - D√©but de la v√©rification')*/
    
    // R√©cup√©rer le token d'authentification depuis les headers
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      /*console.log('‚ùå Token d\'acc√®s manquant')*/
      return NextResponse.json(
        { success: false, error: 'Token d\'acc√®s requis' },
        { status: 401 }
      );
    }

    const token = authHeader.split(' ')[1];
    /*console.log('üîë Token re√ßu:', token.substring(0, 20) + '...');*/

    // Pour l'instant, on va utiliser une approche simplifi√©e
    // On va chercher directement dans la table employees avec le token comme user_id
    // ou utiliser une autre m√©thode selon votre syst√®me d'auth
    
    // Essayer de r√©cup√©rer l'employ√© directement
    const { data: employee, error: employeeError } = await supabase
      .from('employees')
      .select(`
        *,
        admin_users!inner(role, partner_id),
        partners!inner(company_name)
      `)
      .eq('user_id', token) // Utiliser le token comme user_id temporairement
      .single();

    /*console.log('üìä R√©sultat de la requ√™te employee:', { employee, error: employeeError })*/

    if (employeeError) {
      /*console.log('‚ùå Erreur lors de la r√©cup√©ration de l\'employ√©:', employeeError)*/
      
      // Essayer une autre approche - chercher par email ou autre identifiant
      // Pour l'instant, retourner une erreur
      return NextResponse.json(
        { success: false, error: 'Employ√© non trouv√©' },
        { status: 404 }
      );
    }

    if (!employee) {
      /*console.log('‚ùå Aucun employ√© trouv√©')*/
      return NextResponse.json(
        { success: false, error: 'Employ√© non trouv√©' },
        { status: 404 }
      );
    }

    // V√©rifier si l'utilisateur a le r√¥le appropri√© (rh ou responsable)
    const userRole = employee.admin_users?.role;
    /*console.log('üë§ R√¥le de l\'utilisateur:', userRole)*/
    
    if (userRole !== 'rh' && userRole !== 'responsable') {
      /*console.log('‚ùå R√¥le non autoris√©:', userRole)*/
      return NextResponse.json(
        { success: false, error: 'Acc√®s non autoris√© - R√¥le requis: rh ou responsable' },
        { status: 403 }
      );
    }

    // D√©terminer si l'utilisateur a besoin de configurer son salaire
    const needsSetup = employee.salaire_net === 0 || employee.salaire_net === null;
    /*console.log('üí∞ Salaire actuel:', employee.salaire_net, 'needsSetup:', needsSetup)*/

    const response = {
      success: true,
      needsSetup,
      user: {
        id: employee.user_id,
        role: userRole,
        email: employee.email,
        display_name: `${employee.prenom} ${employee.nom}`,
        currentSalary: employee.salaire_net || 0,
        partner: {
          id: employee.partners?.id || employee.partner_id,
          company_name: employee.partners?.company_name || 'Entreprise'
        }
      }
    };

    /*console.log('‚úÖ R√©ponse finale:', response)*/
    return NextResponse.json(response);

  } catch (error) {
    console.error('üí• Erreur lors de la v√©rification du salaire:', error);
    return NextResponse.json(
      { success: false, error: 'Erreur interne du serveur' },
      { status: 500 }
    );
  }
}
