import { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { ImageUploadService } from '../services/imageUploadService';
import { toast } from 'sonner';

export interface UseProfileImageUploadReturn {
  avatarFile: File | null;
  avatarPreview: string;
  imageError: string | null;
  isUploading: boolean;
  setAvatarFile: (file: File | null) => void;
  setAvatarPreview: (url: string) => void;
  setImageError: (error: string | null) => void;
  handleAvatarChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  handleImageUpload: () => Promise<void>;
  resetUpload: () => void;
}

export function useProfileImageUpload(
  initialPhotoURL?: string, 
  userDataOverride?: any
): UseProfileImageUploadReturn {
  const { updateUserData, userData: contextUserData, loading, refreshUserData } = useAuth();
  
  // ‚úÖ Utiliser les donn√©es pass√©es en param√®tre en priorit√©, sinon le contexte
  const userData = userDataOverride || contextUserData;
  const [avatarFile, setAvatarFile] = useState<File | null>(null);
  const [avatarPreview, setAvatarPreview] = useState<string>(initialPhotoURL || '');
  const [imageError, setImageError] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);

  useEffect(() => {
    console.log('üîç useProfileImageUpload Debug:', {
      userData: userData ? 'Pr√©sent' : 'Absent',
      loading,
      userDataKeys: userData ? Object.keys(userData) : 'Aucune donn√©e',
      userDataValues: userData ? {
        employeId: userData.employeId || userData.id,
        nom: userData.nom,
        prenom: userData.prenom,
        user_id: userData.user_id,
        id: userData.id
      } : 'Aucune donn√©e',
    });

    // Forcer le rechargement des donn√©es si userData est null et qu'on n'est pas en cours de chargement
    if (!userData && !loading) {
      console.log('üîÑ Tentative de rechargement des donn√©es utilisateur...');
      // Seulement si on a un currentUser dans le contexte
      refreshUserData().catch(error => {
        console.warn('‚ö†Ô∏è Impossible de recharger les donn√©es utilisateur:', error.message);
      });
    }
  }, [userData, loading, refreshUserData]);

  const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];

    console.log('üîç Debug handleAvatarChange:', {
      file: file ? {
        name: file.name,
        type: file.type,
        size: file.size,
        sizeMB: (file.size / (1024 * 1024)).toFixed(2) + ' MB',
      } : 'Aucun fichier s√©lectionn√©',
    });

    if (!file) {
      console.log('‚ùå Aucun fichier s√©lectionn√©');
      return;
    }

    if (!['image/png', 'image/jpeg', 'image/jpg', 'image/webp'].includes(file.type)) {
      console.log('‚ùå Format non support√©:', file.type);
      setImageError('Format non support√©. Veuillez utiliser une image au format JPG, PNG ou WebP.');
      return;
    }

    if (file.size > 5 * 1024 * 1024) {
      console.log('‚ùå Fichier trop volumineux:', file.size);
      setImageError('L\'image est trop volumineuse. Taille maximale : 5MB.');
      return;
    }

    console.log('‚úÖ Fichier valid√©, mise √† jour des √©tats');
    setImageError(null);
    setAvatarFile(file);
    const url = URL.createObjectURL(file);
    setAvatarPreview(url);

    console.log('‚úÖ √âtats mis √† jour:', {
      avatarFile: 'Fichier d√©fini',
      avatarPreview: 'URL cr√©√©e',
    });
  };

  const handleImageUpload = async () => {
    if (loading) {
      console.log('‚è≥ Attente du chargement des donn√©es...');
      setImageError('Veuillez patienter pendant le chargement des donn√©es...');
      return;
    }

    if (!userData) {
      console.error('‚ùå Aucune donn√©e utilisateur disponible');
      setImageError('Vous devez √™tre connect√© pour modifier votre photo de profil. Veuillez vous connecter.');
      return;
    }

    // ‚úÖ Support pour diff√©rentes structures de donn√©es
    const employeeId = userData.employeId || userData.id;

    console.log('üîç Debug handleImageUpload:', {
      avatarFile: avatarFile ? 'Fichier s√©lectionn√©' : 'Aucun fichier',
      loading,
      userData: userData ? 'Donn√©es employee pr√©sentes' : 'Aucune donn√©e employee',
      employeeId,
      userDataKeys: userData ? Object.keys(userData) : 'Aucune donn√©e',
      userDataValues: userData ? {
        employeId: userData.employeId || userData.id,
        nom: userData.nom,
        prenom: userData.prenom,
        user_id: userData.user_id,
        id: userData.id
      } : 'Aucune donn√©e',
    });

    if (!avatarFile) {
      setImageError('Veuillez s√©lectionner une image avant d\'enregistrer');
      return;
    }

    if (!employeeId) {
      console.error('‚ùå Aucun employee ID trouv√© dans les donn√©es employee:', userData);
      setImageError('Impossible de r√©cup√©rer l\'identifiant employee. Veuillez vous reconnecter.');
      return;
    }

    setIsUploading(true);
    setImageError(null);

    try {
      console.log('üöÄ D√©but de l\'upload de l\'image de profil...');
      console.log('üë§ Employee ID utilis√©:', employeeId);

      const result = await ImageUploadService.uploadProfileImage(avatarFile, employeeId);

      if (result.success && result.url) {
        console.log('‚úÖ Upload r√©ussi, mise √† jour du contexte...');

        // ‚úÖ Mettre √† jour l'aper√ßu imm√©diatement
        setAvatarPreview(result.url);

        // ‚úÖ Forcer le rechargement des donn√©es depuis la base
        try {
          await refreshUserData();
          console.log('‚úÖ Donn√©es utilisateur recharg√©es depuis la base');
        } catch (error) {
          console.warn('‚ö†Ô∏è Erreur rechargement donn√©es:', error);
          // Fallback : essayer updateUserData si refreshUserData √©choue
          try {
            await updateUserData({ photo_url: result.url });
            console.log('‚úÖ Donn√©es mises √† jour via updateUserData');
          } catch (updateError) {
            console.warn('‚ö†Ô∏è Erreur updateUserData aussi:', updateError);
            console.log('üîÑ Forcement d\'un rechargement de page dans 2 secondes...');
            // Dernier recours : recharger la page pour voir la nouvelle photo
            setTimeout(() => {
              window.location.reload();
            }, 2000);
          }
        }

        toast.success('Photo de profil mise √† jour avec succ√®s !');
        setAvatarFile(null);
        console.log('‚úÖ Processus de mise √† jour termin√© avec succ√®s');
      } else {
        console.error('‚ùå Erreur lors de l\'upload:', result.error);
        setImageError(result.error || 'Une erreur est survenue lors du t√©l√©versement');
      }
    } catch (error) {
      console.error('üí• Erreur lors du t√©l√©versement de l\'image:', error);
      setImageError('Une erreur inattendue est survenue');
    } finally {
      setIsUploading(false);
    }
  };

  const resetUpload = () => {
    setAvatarFile(null);
    setImageError(null);
    setIsUploading(false);
  };

  return {
    avatarFile,
    avatarPreview,
    imageError,
    isUploading,
    setAvatarFile,
    setAvatarPreview,
    setImageError,
    handleAvatarChange,
    handleImageUpload,
    resetUpload,
  };
}