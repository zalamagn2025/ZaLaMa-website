import { 
  SalaryAdvanceDemand, 
  CreateDemandRequest, 
  CreateDemandResponse, 
  DemandsListResponse, 
  DemandsStatsResponse,
  ApiError 
} from '@/types/employee-demands';

class EmployeeDemandsService {
  private getAccessToken(): string | null {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('employee_access_token') || sessionStorage.getItem('employee_access_token');
    }
    return null;
  }

  private async makeRequest<T>(
    endpoint: string, 
    options: RequestInit = {}
  ): Promise<T> {
    const accessToken = this.getAccessToken();
    
    if (!accessToken) {
      console.warn('‚ö†Ô∏è Token d\'acc√®s non trouv√© - redirection vers la page de connexion');
      // Rediriger vers la page de connexion si pas de token
      if (typeof window !== 'undefined') {
        window.location.href = '/login';
      }
      throw new Error('Token d\'acc√®s non trouv√© - veuillez vous connecter');
    }

    try {
      const response = await fetch(`/api/employee-demands/${endpoint}`, {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessToken}`,
          ...options.headers,
        },
      });

      const result = await response.json();

      if (!response.ok) {
        console.error('‚ùå Erreur API:', response.status, result);
        throw new Error(result.error || 'Erreur lors de la requ√™te');
      }

      return result;
    } catch (error) {
      console.error('‚ùå Erreur r√©seau:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer la liste des demandes d'avance de salaire
   */
  async getDemandsList(page: number = 1, limit: number = 20): Promise<DemandsListResponse> {
    try {
      console.log('üìã R√©cup√©ration de la liste des demandes...');
      
      const response = await this.makeRequest<DemandsListResponse>(
        `list?page=${page}&limit=${limit}`
      );
      
      console.log('‚úÖ Liste des demandes r√©cup√©r√©e:', response.data.demands.length, 'demandes');
      return response;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des demandes:', error);
      throw error;
    }
  }

  /**
   * Cr√©er une nouvelle demande d'avance de salaire
   */
  async createDemand(demandData: CreateDemandRequest): Promise<CreateDemandResponse> {
    try {
      console.log('üìù Cr√©ation d\'une nouvelle demande...', demandData);
      
      const response = await this.makeRequest<CreateDemandResponse>('create', {
        method: 'POST',
        body: JSON.stringify(demandData),
      });
      
      console.log('‚úÖ Demande cr√©√©e avec succ√®s:', response.data.id);
      return response;
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation de la demande:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer les statistiques des demandes
   */
  async getDemandsStats(): Promise<DemandsStatsResponse> {
    try {
      console.log('üìä R√©cup√©ration des statistiques...');
      
      const response = await this.makeRequest<DemandsStatsResponse>('stats');
      
      console.log('‚úÖ Statistiques r√©cup√©r√©es:', response.data);
      return response;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
      throw error;
    }
  }

  /**
   * Mettre √† jour une demande (si autoris√©)
   */
  async updateDemand(demandId: string, updateData: Partial<CreateDemandRequest>): Promise<any> {
    try {
      console.log('üîÑ Mise √† jour de la demande:', demandId, updateData);
      
      const response = await this.makeRequest(`update/${demandId}`, {
        method: 'PUT',
        body: JSON.stringify(updateData),
      });
      
      console.log('‚úÖ Demande mise √† jour avec succ√®s');
      return response;
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour de la demande:', error);
      throw error;
    }
  }

  /**
   * Supprimer une demande (si autoris√©)
   */
  async deleteDemand(demandId: string): Promise<any> {
    try {
      console.log('üóëÔ∏è Suppression de la demande:', demandId);
      
      const response = await this.makeRequest(`delete/${demandId}`, {
        method: 'DELETE',
      });
      
      console.log('‚úÖ Demande supprim√©e avec succ√®s');
      return response;
    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression de la demande:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer une demande sp√©cifique
   */
  async getDemand(demandId: string): Promise<any> {
    try {
      console.log('üîç R√©cup√©ration de la demande:', demandId);
      
      const response = await this.makeRequest(`get/${demandId}`);
      
      console.log('‚úÖ Demande r√©cup√©r√©e:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la demande:', error);
      throw error;
    }
  }

  /**
   * Annuler une demande d'avance
   */
  async cancelDemand(demandId: string, reason?: string): Promise<any> {
    try {
      console.log('‚ùå Annulation de la demande:', demandId, reason ? `Motif: ${reason}` : 'Sans motif');
      
      const response = await this.makeRequest('cancel', {
        method: 'POST',
        body: JSON.stringify({
          id: demandId,
          ...(reason && { reason })
        }),
      });
      
      console.log('‚úÖ Demande annul√©e avec succ√®s');
      return response;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'annulation de la demande:', error);
      throw error;
    }
  }
}

// Instance singleton
export const employeeDemandsService = new EmployeeDemandsService();


