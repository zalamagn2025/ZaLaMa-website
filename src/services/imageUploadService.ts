import { supabase } from '@/lib/supabase';

export interface ImageUploadResult {
  success: boolean;
  url?: string;
  error?: string;
}

export class ImageUploadService {
  /**
   * Upload une image vers Supabase Storage et met √† jour la photo_url dans la table employees
   * S'assure qu'il n'y ait qu'une seule photo par employ√©
   */
  static async uploadProfileImage(
    file: File, 
    employeeId: string,
  ): Promise<ImageUploadResult> {
    try {
      // 1. V√©rifier le type et la taille du fichier
      if (!['image/png', 'image/jpeg', 'image/jpg', 'image/webp'].includes(file.type)) {
        return {
          success: false,
          error: 'Format non support√©. Veuillez utiliser une image au format JPG, PNG ou WebP.'
        };
      }

      if (file.size > 5 * 1024 * 1024) { // 5MB max
        return {
          success: false,
          error: 'L\'image est trop volumineuse. Taille maximale : 5MB.'
        };
      }

      // 2. R√©cup√©rer l'ancienne photo pour la supprimer plus tard
      const { data: employeeData, error: employeeError } = await supabase
        .from('employees')
        .select('photo_url')
        .eq('id', employeeId)
        .single();

      if (employeeError) {
        console.error('‚ùå Erreur r√©cup√©ration employ√©:', employeeError);
        return {
          success: false,
          error: 'Erreur lors de la r√©cup√©ration des donn√©es employ√©'
        };
      }

      const oldPhotoUrl = employeeData?.photo_url;

      // 3. G√©n√©rer un nom de fichier unique par employ√© (√©crase l'ancien)
      const fileExt = file.name.split('.').pop();
      const fileName = `${employeeId}.${fileExt}`;
      const filePath = fileName; // Directement √† la racine du bucket

      console.log('üì§ Upload vers Supabase Storage:', {
        bucket: 'profiles-images',
        filePath,
        fileSize: `${(file.size / 1024 / 1024).toFixed(2)} MB`,
        fileType: file.type,
        employeeId,
        oldPhotoUrl: oldPhotoUrl ? 'Existante' : 'Aucune'
      });

      // 4. Upload vers le bucket profiles-images avec upsert pour remplacer l'ancienne
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('profiles-images')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: true // ‚úÖ Remplace automatiquement si existe d√©j√†
        });

      if (uploadError) {
        console.error('‚ùå Erreur upload Supabase:', uploadError);
        return {
          success: false,
          error: 'Erreur lors du t√©l√©versement de l\'image'
        };
      }

      console.log('‚úÖ Upload r√©ussi:', uploadData);

      // 5. Obtenir l'URL publique avec cache buster
      const { data: urlData } = supabase.storage
        .from('profiles-images')
        .getPublicUrl(filePath);

      // ‚úÖ Ajouter un timestamp pour forcer le refresh du cache navigateur
      const timestamp = Date.now();
      const publicUrl = `${urlData.publicUrl}?t=${timestamp}`;

      console.log('üîó URL publique avec cache buster g√©n√©r√©e:', publicUrl);

      // 6. Mettre √† jour la photo_url dans la table employees
      const { error: updateError } = await supabase
        .from('employees')
        .update({ 
          photo_url: publicUrl,
          updated_at: new Date().toISOString()
        })
        .eq('id', employeeId);

      if (updateError) {
        console.error('‚ùå Erreur mise √† jour photo_url:', updateError);
        // Supprimer le fichier upload√© en cas d'erreur
        await supabase.storage
          .from('profiles-images')
          .remove([filePath]);
        
        return {
          success: false,
          error: 'Erreur lors de la mise √† jour du profil'
        };
      }

      console.log('‚úÖ Photo de profil mise √† jour avec succ√®s');

      return {
        success: true,
        url: publicUrl
      };

    } catch (error) {
      console.error('üí• Erreur upload image:', error);
      return {
        success: false,
        error: 'Une erreur inattendue est survenue'
      };
    }
  }

  /**
   * Supprime une ancienne image de profil du bucket profiles-images
   */
  static async deleteProfileImage(imageUrl: string): Promise<boolean> {
    try {
      // Extraire le nom du fichier depuis l'URL
      const urlParts = imageUrl.split('/');
      const fileName = urlParts[urlParts.length - 1];
      // Le fichier est directement √† la racine du bucket profiles-images
      const filePath = fileName;

      console.log('üóëÔ∏è Suppression de l\'ancienne image:', { imageUrl, fileName, filePath });

      // Supprimer le fichier du bucket profiles-images
      const { error } = await supabase.storage
        .from('profiles-images')
        .remove([filePath]);

      if (error) {
        console.error('‚ùå Erreur suppression image:', error);
        return false;
      }

      console.log('‚úÖ Ancienne image supprim√©e avec succ√®s');
      return true;
    } catch (error) {
      console.error('üí• Erreur suppression image:', error);
      return false;
    }
  }

  /**
   * R√©cup√®re l'URL de l'image de profil d'un employ√©
   */
  static async getProfileImageUrl(userId: string): Promise<string | null> {
    try {
      const { data, error } = await supabase
        .from('employees')
        .select('photo_url')
        .eq('user_id', userId)
        .single();

      if (error) {
        console.error('Erreur r√©cup√©ration photo_url:', error);
        return null;
      }

      return data?.photo_url || null;
    } catch (error) {
      console.error('Erreur r√©cup√©ration photo_url:', error);
      return null;
    }
  }
} 