"use client";

import { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { employeeAuthService, EmployeeData } from '@/lib/apiEmployeeAuth';

interface EmployeeAuthContextType {
  employee: EmployeeData | null;
  loading: boolean;
  error: string | null;
  isAuthenticated: boolean;
  login: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  refreshProfile: () => Promise<void>;
}

const EmployeeAuthContext = createContext<EmployeeAuthContextType | undefined>(undefined);

export function useEmployeeAuth() {
  const context = useContext(EmployeeAuthContext);
  if (context === undefined) {
    throw new Error('useEmployeeAuth doit √™tre utilis√© √† l\'int√©rieur d\'un EmployeeAuthProvider');
  }
  return context;
}

interface EmployeeAuthProviderProps {
  children: ReactNode;
}

export function EmployeeAuthProvider({ children }: EmployeeAuthProviderProps) {
  const [employee, setEmployee] = useState<EmployeeData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // Fonction pour charger le profil employ√©
  const loadProfile = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // V√©rifier si un token d'acc√®s existe (utiliser la m√™me cl√© que le service)
      const accessToken = localStorage.getItem('employee_access_token');
      if (!accessToken) {
        setEmployee(null);
        setIsAuthenticated(false);
        return;
      }

      // R√©cup√©rer le profil depuis l'Edge Function
      const response = await employeeAuthService.getProfile(accessToken);
      
      if (response.success && response.data) {
        setEmployee(response.data);
        setIsAuthenticated(true);
        console.log('‚úÖ Profil employ√© charg√© dans le contexte:', response.data.nom, response.data.prenom);
      } else {
        setEmployee(null);
        setIsAuthenticated(false);
        console.warn('‚ö†Ô∏è Aucun profil trouv√© ou erreur:', response.error);
        // Nettoyer le token si aucun profil n'est trouv√©
        localStorage.removeItem('employee_access_token');
        localStorage.removeItem('employee_refresh_token');
      }
    } catch (err) {
      console.error('‚ùå Erreur lors du chargement du profil:', err);
      
      // Ne pas afficher l'erreur si c'est juste un probl√®me de r√©seau temporaire
      const errorMessage = err instanceof Error ? err.message : 'Erreur lors du chargement du profil';
      
      // Si l'erreur est li√©e √† l'authentification, nettoyer les tokens et l'√©tat
      if (err instanceof Error && (
        errorMessage.includes('Token') || 
        errorMessage.includes('Session') || 
        errorMessage.includes('401') ||
        errorMessage.includes('403')
      )) {
        console.log('üîí Erreur d\'authentification d√©tect√©e, nettoyage de la session...');
        setError(null); // Ne pas afficher l'erreur √† l'utilisateur
        setEmployee(null);
        setIsAuthenticated(false);
        localStorage.removeItem('employee_access_token');
        localStorage.removeItem('employee_refresh_token');
      } else {
        // Pour les autres erreurs (r√©seau, etc.), garder l'√©tat actuel
        setError(errorMessage);
        console.warn('‚ö†Ô∏è Erreur temporaire, conservation de l\'√©tat d\'authentification');
      }
    } finally {
      setLoading(false);
    }
  };

  // Fonction de connexion
  const login = async (email: string, password: string) => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üîê Tentative de connexion via le contexte...');
      
      const response = await employeeAuthService.login(email, password);
      
      if (response.success && response.access_token) {
        // Stocker les tokens (utiliser la m√™me cl√© que le service)
        localStorage.setItem('employee_access_token', response.access_token);
        if (response.refresh_token) {
          localStorage.setItem('employee_refresh_token', response.refresh_token);
        }
        
        // Charger le profil avec le nouveau token
        await loadProfile();
        
        console.log('‚úÖ Connexion r√©ussie via le contexte');
      } else {
        throw new Error(response.error || '√âchec de la connexion');
      }
    } catch (err) {
      console.error('‚ùå Erreur de connexion via le contexte:', err);
      setError(err instanceof Error ? err.message : 'Erreur de connexion');
      setEmployee(null);
      setIsAuthenticated(false);
      throw err; // Re-lancer l'erreur pour que le composant puisse la g√©rer
    } finally {
      setLoading(false);
    }
  };

  // Fonction de d√©connexion
  const logout = async () => {
    try {
      setLoading(true);
      
      // Nettoyer les tokens du localStorage (utiliser la m√™me cl√© que le service)
      localStorage.removeItem('employee_access_token');
      localStorage.removeItem('employee_refresh_token');
      
      setEmployee(null);
      setIsAuthenticated(false);
      setError(null);
      console.log('‚úÖ D√©connexion r√©ussie via le contexte');
    } catch (err) {
      console.error('‚ùå Erreur lors de la d√©connexion via le contexte:', err);
      // M√™me en cas d'erreur, nettoyer l'√©tat local
      setEmployee(null);
      setIsAuthenticated(false);
      setError(null);
    } finally {
      setLoading(false);
    }
  };

  // Fonction pour rafra√Æchir le profil
  const refreshProfile = async () => {
    await loadProfile();
  };

  // Charger le profil au montage du composant
  useEffect(() => {
    loadProfile();
  }, []);

  // √âcouter les changements d'authentification (optionnel, pour la synchronisation)
  useEffect(() => {
    const checkAuthStatus = async () => {
      try {
        // Seulement v√©rifier si on n'a pas d√©j√† un employ√© charg√©
        if (!employee && employeeAuthService.isAuthenticated()) {
          console.log('üîÑ V√©rification p√©riodique du statut d\'authentification...');
          const profile = await employeeAuthService.getProfile();
          if (profile) {
            setEmployee(profile);
            setIsAuthenticated(true);
            console.log('‚úÖ Profil r√©cup√©r√© lors de la v√©rification p√©riodique');
          } else {
            // Token invalide, nettoyer l'√©tat
            setEmployee(null);
            setIsAuthenticated(false);
            await employeeAuthService.logout();
            console.log('üîí Token invalide d√©tect√©, session nettoy√©e');
          }
        }
      } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification du statut d\'authentification:', error);
        // En cas d'erreur, ne pas nettoyer automatiquement l'√©tat
        // Laisser l'utilisateur continuer sa session
      }
    };

    // V√©rifier p√©riodiquement le statut d'authentification seulement si pas d'employ√©
    const interval = setInterval(checkAuthStatus, 120000); // Toutes les 2 minutes

    return () => clearInterval(interval);
  }, [employee]); // D√©pendance seulement sur employee

  // Debug pour suivre l'√©tat du contexte
  useEffect(() => {
    console.log('üîç EmployeeAuthContext Debug - √âtat actuel:', {
      employee: employee ? 'Pr√©sent' : 'Absent',
      employeeName: employee ? `${employee.prenom} ${employee.nom}` : 'Aucun',
      employeeId: employee?.id,
      loading,
      isAuthenticated,
      error: error || 'Aucune erreur'
    });
  }, [employee, loading, isAuthenticated, error]);

  const value = {
    employee,
    loading,
    error,
    isAuthenticated,
    login,
    logout,
    refreshProfile,
  };

  return (
    <EmployeeAuthContext.Provider value={value}>
      {children}
    </EmployeeAuthContext.Provider>
  );
}
