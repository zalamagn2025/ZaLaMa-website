// Script pour forcer le rechargement des donn√©es d'authentification
const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function forceReloadAuth() {
  console.log('üîÑ Force reload des donn√©es d\'authentification...\n');

  try {
    // 1. V√©rifier la session actuelle
    console.log('1Ô∏è‚É£ V√©rification de la session actuelle...');
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Erreur de session:', sessionError);
      return;
    }
    
    if (!session) {
      console.log('‚ö†Ô∏è Aucune session active');
      console.log('üí° Connectez-vous d\'abord');
      return;
    }
    
    console.log('‚úÖ Session active trouv√©e');
    console.log('üë§ User ID:', session.user.id);
    console.log('üìß Email:', session.user.email);

    // 2. Forcer la r√©cup√©ration des donn√©es employee
    console.log('\n2Ô∏è‚É£ Force r√©cup√©ration des donn√©es employee...');
    
    // Essayer d'abord avec le filtre actif
    let { data: employees, error: employeesError } = await supabase
      .from('employees')
      .select('*')
      .eq('user_id', session.user.id)
      .eq('actif', true)
      .single();

    if (employeesError) {
      console.log('‚ö†Ô∏è Erreur avec filtre actif, tentative sans filtre...');
      
      // Essayer sans filtre actif
      const { data: allEmployees, error: allEmployeesError } = await supabase
        .from('employees')
        .select('*')
        .eq('user_id', session.user.id);

      if (allEmployeesError) {
        console.error('‚ùå Erreur recherche sans filtre:', allEmployeesError);
        return;
      }

      if (allEmployees && allEmployees.length > 0) {
        console.log('üìã Employees trouv√©s (tous statuts):', allEmployees.map(emp => ({
          employeId: emp.employeId,
          nom: emp.nom,
          prenom: emp.prenom,
          actif: emp.actif,
          user_id: emp.user_id
        })));
        
        // Prendre le premier employee
        employees = allEmployees[0];
        console.log('‚úÖ Employee s√©lectionn√©:', {
          employeId: employees.employeId,
          nom: employees.nom,
          prenom: employees.prenom
        });
      } else {
        console.log('‚ùå Aucun employee trouv√© du tout');
        return;
      }
    } else {
      console.log('‚úÖ Employee trouv√© avec filtre actif:', {
        employeId: employees.employeId,
        nom: employees.nom,
        prenom: employees.prenom,
        actif: employees.actif
      });
    }

    // 3. Forcer une mise √† jour pour d√©clencher le contexte
    console.log('\n3Ô∏è‚É£ Force mise √† jour pour d√©clencher le contexte...');
    const forceUpdate = { 
      updated_at: new Date().toISOString(),
      // Ajouter un champ temporaire pour forcer la mise √† jour
      temp_field: 'force_update_' + Date.now()
    };
    
    const { data: updateData, error: updateError } = await supabase
      .from('employees')
      .update(forceUpdate)
      .eq('employeId', employees.employeId)
      .select()
      .single();

    if (updateError) {
      console.error('‚ùå Erreur force mise √† jour:', updateError);
    } else {
      console.log('‚úÖ Force mise √† jour r√©ussie');
      
      // Restaurer l'√©tat original
      const { error: restoreError } = await supabase
        .from('employees')
        .update({ 
          updated_at: new Date().toISOString()
        })
        .eq('employeId', employees.employeId);
      
      if (restoreError) {
        console.warn('‚ö†Ô∏è Erreur restauration:', restoreError);
      } else {
        console.log('üîÑ √âtat restaur√©');
      }
    }

    // 4. V√©rifier l'√©tat final
    console.log('\n4Ô∏è‚É£ V√©rification de l\'√©tat final...');
    const { data: finalCheck, error: finalError } = await supabase
      .from('employees')
      .select('*')
      .eq('employeId', employees.employeId)
      .single();

    if (finalError) {
      console.error('‚ùå Erreur v√©rification finale:', finalError);
    } else {
      console.log('‚úÖ √âtat final v√©rifi√©:', {
        employeId: finalCheck.employeId,
        nom: finalCheck.nom,
        prenom: finalCheck.prenom,
        actif: finalCheck.actif,
        updated_at: finalCheck.updated_at
      });
    }

    console.log('\n‚úÖ Force reload termin√© avec succ√®s !');
    console.log('\nüìã Instructions :');
    console.log('1. Rechargez la page dans le navigateur');
    console.log('2. V√©rifiez la console pour les logs de debug');
    console.log('3. Testez l\'upload d\'image');

  } catch (error) {
    console.error('üí• Erreur lors du force reload:', error);
  }
}

// Ex√©cuter le force reload
forceReloadAuth(); 