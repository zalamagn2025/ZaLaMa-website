// Script de test pour v√©rifier la cr√©ation de demande d'avance
// Utilise la table salary_advance_requests

const { createClient } = require('@supabase/supabase-js')

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PRIVATE_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  console.log('NEXT_PRIVATE_SUPABASE_URL:', !!supabaseUrl)
  console.log('SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey)
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function testSalaryAdvanceCreation() {
  console.log('üß™ Test de cr√©ation de demande d\'avance avec partenaire_id obligatoire')
  console.log('=' .repeat(60))

  try {
    // 1. R√©cup√©rer un employ√© de test avec son entreprise
    console.log('\n1Ô∏è‚É£ Recherche d\'un employ√© de test...')
    const { data: employees, error: employeesError } = await supabase
      .from('employees')
      .select(`
        id,
        user_id,
        salaire_net,
        partner_id,
        partners!inner(
          id,
          nom_entreprise,
          statut
        )
      `)
      .eq('actif', true)
      .not('partner_id', 'is', null)
      .limit(1)

    if (employeesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des employ√©s:', employeesError)
      return
    }

    if (!employees || employees.length === 0) {
      console.error('‚ùå Aucun employ√© trouv√© avec une entreprise associ√©e')
      return
    }

    const employee = employees[0]
    console.log('‚úÖ Employ√© trouv√©:', {
      id: employee.id,
      user_id: employee.user_id,
      salaire_net: employee.salaire_net,
      partner_id: employee.partner_id,
      entreprise: employee.partners.nom_entreprise
    })

    // 2. V√©rifier la structure de la table salary_advance_requests
    console.log('\n2Ô∏è‚É£ V√©rification de la structure de la table...')
    const { data: tableInfo, error: tableError } = await supabase
      .rpc('get_table_info', { table_name: 'salary_advance_requests' })
      .catch(() => ({ data: null, error: 'Fonction RPC non disponible' }))

    if (tableError) {
      console.log('‚ö†Ô∏è Impossible de v√©rifier la structure de la table (RPC non disponible)')
    } else {
      console.log('‚úÖ Structure de la table v√©rifi√©e')
    }

    // 3. Tester la cr√©ation d'une demande d'avance
    console.log('\n3Ô∏è‚É£ Test de cr√©ation d\'une demande d\'avance...')
    
    const testAdvanceData = {
      employe_id: employee.id,
      partenaire_id: employee.partner_id, // Obligatoire
      montant_demande: 100000, // 100,000 GNF
      type_motif: 'URGENCE',
      motif: 'Test de cr√©ation avec partenaire_id obligatoire',
      numero_reception: `TEST-${Date.now()}`,
      frais_service: 5000,
      montant_total: 105000,
      salaire_disponible: employee.salaire_net,
      avance_disponible: Math.floor(employee.salaire_net * 0.25),
      statut: 'En attente',
      date_creation: new Date().toISOString()
    }

    console.log('üìã Donn√©es de test:', testAdvanceData)

    const { data: createdAdvance, error: createError } = await supabase
      .from('salary_advance_requests')
      .insert(testAdvanceData)
      .select()
      .single()

    if (createError) {
      console.error('‚ùå Erreur lors de la cr√©ation:', createError)
      
      // V√©rifier si l'erreur est li√©e √† partenaire_id
      if (createError.message.includes('partenaire_id') || createError.message.includes('null')) {
        console.error('üîç Erreur li√©e √† partenaire_id - v√©rification de la contrainte NOT NULL')
      }
      
      return
    }

    console.log('‚úÖ Demande d\'avance cr√©√©e avec succ√®s:', {
      id: createdAdvance.id,
      employe_id: createdAdvance.employe_id,
      partenaire_id: createdAdvance.partenaire_id,
      montant_demande: createdAdvance.montant_demande,
      statut: createdAdvance.statut
    })

    // 4. V√©rifier que la demande a bien √©t√© cr√©√©e
    console.log('\n4Ô∏è‚É£ V√©rification de la demande cr√©√©e...')
    const { data: verifyAdvance, error: verifyError } = await supabase
      .from('salary_advance_requests')
      .select(`
        *,
        employees!inner(
          id,
          nom,
          prenom,
          salaire_net,
          partner_id
        ),
        partners!inner(
          id,
          nom_entreprise,
          statut
        )
      `)
      .eq('id', createdAdvance.id)
      .single()

    if (verifyError) {
      console.error('‚ùå Erreur lors de la v√©rification:', verifyError)
      return
    }

    console.log('‚úÖ Demande v√©rifi√©e avec succ√®s:')
    console.log('  - ID:', verifyAdvance.id)
    console.log('  - Employ√©:', `${verifyAdvance.employees.prenom} ${verifyAdvance.employees.nom}`)
    console.log('  - Entreprise:', verifyAdvance.partners.nom_entreprise)
    console.log('  - Partenaire ID:', verifyAdvance.partenaire_id)
    console.log('  - Montant:', verifyAdvance.montant_demande.toLocaleString(), 'GNF')
    console.log('  - Statut:', verifyAdvance.statut)

    // 5. Test de validation - essayer de cr√©er sans partenaire_id
    console.log('\n5Ô∏è‚É£ Test de validation - cr√©ation sans partenaire_id...')
    const invalidAdvanceData = {
      employe_id: employee.id,
      // partenaire_id manquant intentionnellement
      montant_demande: 50000,
      type_motif: 'TEST',
      motif: 'Test sans partenaire_id',
      montant_total: 50000,
      statut: 'En attente',
      date_creation: new Date().toISOString()
    }

    const { data: invalidAdvance, error: invalidError } = await supabase
      .from('salary_advance_requests')
      .insert(invalidAdvanceData)
      .select()

    if (invalidError) {
      console.log('‚úÖ Validation fonctionne - partenaire_id est obligatoire')
      console.log('‚ùå Erreur attendue:', invalidError.message)
    } else {
      console.error('‚ùå PROBL√àME: La cr√©ation sans partenaire_id a r√©ussi (ne devrait pas)')
      console.log('‚ö†Ô∏è Donn√©es cr√©√©es:', invalidAdvance)
    }

    // 6. Nettoyage - supprimer la demande de test
    console.log('\n6Ô∏è‚É£ Nettoyage - suppression de la demande de test...')
    const { error: deleteError } = await supabase
      .from('salary_advance_requests')
      .delete()
      .eq('id', createdAdvance.id)

    if (deleteError) {
      console.error('‚ö†Ô∏è Erreur lors du nettoyage:', deleteError)
    } else {
      console.log('‚úÖ Demande de test supprim√©e')
    }

    console.log('\nüéâ Test termin√© avec succ√®s!')
    console.log('‚úÖ partenaire_id est bien obligatoire dans la table salary_advance_requests')

  } catch (error) {
    console.error('üí• Erreur g√©n√©rale:', error)
  }
}

// Ex√©cuter le test
testSalaryAdvanceCreation() 