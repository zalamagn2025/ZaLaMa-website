// Script de test pour v√©rifier le chargement de l'image de profil
const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PRIVATE_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PRIVATE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testProfileImage() {
  console.log('üîç Test du chargement de l\'image de profil...\n');

  try {
    // 1. V√©rifier la session actuelle
    console.log('1Ô∏è‚É£ V√©rification de la session actuelle...');
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Erreur de session:', sessionError);
      return;
    }
    
    if (!session) {
      console.log('‚ö†Ô∏è Aucune session active');
      console.log('üí° Pour tester, vous devez vous connecter d\'abord');
      return;
    }
    
    console.log('‚úÖ Session active trouv√©e');
    console.log('üë§ User ID de la session:', session.user.id);

    // 2. R√©cup√©rer les donn√©es employee
    console.log('\n2Ô∏è‚É£ R√©cup√©ration des donn√©es employee...');
    const { data: employees, error: employeesError } = await supabase
      .from('employees')
      .select('*')
      .eq('user_id', session.user.id)
      .eq('actif', true)
      .single();

    if (employeesError) {
      console.error('‚ùå Erreur acc√®s table employees:', employeesError);
      return;
    }

    if (!employees) {
      console.log('‚ùå Aucun employee trouv√©');
      return;
    }

    console.log('‚úÖ Employee trouv√©:', {
      employeId: employees.employeId,
      nom: employees.nom,
      prenom: employees.prenom,
      photo_url: employees.photo_url
    });

    // 3. Tester l'URL de l'image
    if (employees.photo_url) {
      console.log('\n3Ô∏è‚É£ Test de l\'URL de l\'image...');
      console.log('üîó URL de l\'image:', employees.photo_url);
      
      try {
        // Tester si l'URL est accessible
        const response = await fetch(employees.photo_url, { method: 'HEAD' });
        
        if (response.ok) {
          console.log('‚úÖ Image accessible (Status:', response.status, ')');
          console.log('üìè Taille:', response.headers.get('content-length'), 'bytes');
          console.log('üìã Type:', response.headers.get('content-type'));
        } else {
          console.warn('‚ö†Ô∏è Image non accessible (Status:', response.status, ')');
        }
      } catch (error) {
        console.error('‚ùå Erreur lors du test de l\'URL:', error.message);
      }
    } else {
      console.log('\n3Ô∏è‚É£ Aucune image de profil d√©finie');
    }

    // 4. Tester la mise √† jour de l'image
    console.log('\n4Ô∏è‚É£ Test de mise √† jour de l\'image...');
    const testPhotoUrl = 'https://example.com/test-photo.jpg';
    
    const { data: updateData, error: updateError } = await supabase
      .from('employees')
      .update({ 
        photo_url: testPhotoUrl,
        updated_at: new Date().toISOString()
      })
      .eq('id', employees.employeId)
      .select()
      .single();

    if (updateError) {
      console.error('‚ùå Erreur mise √† jour photo_url:', updateError);
    } else {
      console.log('‚úÖ Mise √† jour photo_url r√©ussie');
      console.log('üîÑ Nouvelle URL:', updateData.photo_url);
      
      // Restaurer l'ancienne valeur
      const { error: restoreError } = await supabase
        .from('employees')
        .update({ 
          photo_url: employees.photo_url,
          updated_at: new Date().toISOString()
        })
        .eq('id', employees.employeId);
      
      if (restoreError) {
        console.warn('‚ö†Ô∏è Erreur restauration photo_url:', restoreError);
      } else {
        console.log('üîÑ Photo_url restaur√©e');
      }
    }

    // 5. V√©rifier les permissions de stockage
    console.log('\n5Ô∏è‚É£ V√©rification des permissions de stockage...');
    try {
      const { data: storageData, error: storageError } = await supabase.storage
        .from('employee-photos')
        .list('profile-images', {
          limit: 1
        });

      if (storageError) {
        console.error('‚ùå Erreur acc√®s stockage:', storageError);
      } else {
        console.log('‚úÖ Acc√®s au stockage r√©ussi');
        console.log('üìÅ Fichiers dans profile-images:', storageData?.length || 0);
      }
    } catch (error) {
      console.error('‚ùå Erreur test stockage:', error);
    }

    console.log('\n‚úÖ Test termin√© avec succ√®s !');
    console.log('\nüìã R√©sum√© :');
    console.log('- ‚úÖ Session active');
    console.log('- ‚úÖ Employee trouv√©');
    console.log('- ‚úÖ Photo URL:', employees.photo_url ? 'D√©finie' : 'Non d√©finie');
    console.log('- ‚úÖ Mise √† jour possible');
    console.log('- ‚úÖ Stockage accessible');

  } catch (error) {
    console.error('üí• Erreur lors du test:', error);
  }
}

// Ex√©cuter le test
testProfileImage(); 